@page "/svghexgrid"

@using System.Text;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using TFT_HexGrid.Grids;
@using TFT_HexGrid.Maps;

@inject IJSRuntime jsRuntime

<h1>SVG HexGrid</h1>

<p><label>Rows:</label> <input @bind="_rowCount" /></p>
<p><label>Columns: </label> <input @bind="_colCount" /></p>
<p><label>Side Length: </label> <input @bind="_sideLen" /></p>
<button class="btn btn-primary" @onclick="GenerateTheGrid">Generate</button>
<button class="btn btn-primary" @onclick="SaveMe">Save To File</button>
<p />
<p>
    <label>Clicked Row, Col: @_hexLabel</label>&nbsp;&nbsp;&nbsp;&nbsp;<label>Clicked X, Y: @_mouseLabel</label>&nbsp;&nbsp;&nbsp;&nbsp;<label>Translated X, Y: @_translateLabel</label>
</p>
<p />

<div @ref="_divSvg" @onclick="SvgOnClick" @oncontextmenu="SvgOnClick" @oncontextmenu:preventDefault="true">
    <svg xmlns="http://www.w3.org/2000/svg" @ref="_svg" width="11in" height="8.5in" viewBox="0 0 1056 816">
        @((MarkupString)_mySvgData)
    </svg>
</div>

@code {
    private string _mySvgData = string.Empty;

    private int _rowCount = 5;
    private int _colCount = 7;
    private double _sideLen = 25d;

    private string _hexLabel = string.Empty;
    private string _mouseLabel = string.Empty;
    private string _translateLabel = string.Empty;

    private Grid _grid;
    private Map _map;

    private ElementReference _divSvg;
    private ElementReference _svg;

    private double _offsetLeft;
    private double _offsetTop;

    private const string WIDTH = "11in";
    private const string HEIGHT = "8.5in";

    private const double TRANSLATE_W = 528d;
    private const double TRANSLATE_H = 408d;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string data = await jsRuntime.InvokeAsync<string>("getDivOffsets", new object[] { _divSvg });
            JObject offsets = (JObject)JsonConvert.DeserializeObject(data);

            // get the actual coordinates of the mouse click within the div:
            _offsetLeft = offsets.Value<double>("offsetLeft");
            _offsetTop = offsets.Value<double>("offsetTop");
        }
    }

    private void GenerateTheGrid()
    {
        var size = new GridPoint(_sideLen, _sideLen);
        var origin = new GridPoint(0.5d, .5d);

        _grid = new Grid(_rowCount, _colCount, size, origin);
        _map = _grid.InitMap();

        var sb = new StringBuilder();

        // paint the background light grey
        sb.Append(string.Format("<rect height = '{0}' width = '{1}' style = 'fill:#E0E0E0; stroke:#000000; stroke-width:1' />", HEIGHT, WIDTH));

        // draw the hexes as polygons
        sb.AppendLine(string.Format("<g transform='translate({0} {1})'>", TRANSLATE_W, TRANSLATE_H));

        foreach (Hexagon h in _grid.Hexagons.Values)
        {
            sb.AppendLine(GetSvgHexagon(h, "#FFFFFF"));
        }

        // draw the outlines of the megagons
        foreach (Megagon m in _grid.Megagons.Values)
        {
            sb.AppendLine(GetSvgPathForMegagon(m, "#000000", "3"));
        }

        sb.AppendLine("</g>");

        // update the SVG element
        _mySvgData = sb.ToString();
        sb.Clear();

    }

    private void SvgOnClick(MouseEventArgs eventArgs)
    {
        // get the actual coordinates of the mouse click within the canvas:
        double mouseX = eventArgs.ClientX - _offsetLeft;
        double mouseY = eventArgs.ClientY - _offsetTop;

        var translatedX = mouseX - TRANSLATE_W;
        var translatedY = mouseY - TRANSLATE_H;

        _mouseLabel = string.Format(" {0}, {1}", mouseX, mouseY);
        _translateLabel = string.Format(" {0}, {1}", translatedX, translatedY);

        // get the hex the user clicked on, if any:
        var hex = _grid.GetHexAt(new GridPoint(translatedX, translatedY));
        _hexLabel = hex != null ? string.Format(" {0}, {1}", hex.OffsetLocation.Row, hex.OffsetLocation.Col) : "none";

    }

    private string GetSvgHexagon(Hexagon h, string fill)
    {
        return string.Format("<polygon points = '{0}' style = 'fill:{1}; stroke:#000000; stroke-width:1' id = '{2}' @ref='{2}' />", h.SvgPoints, fill, h.GetHashCode());
    }

    private string GetSvgPathForMegagon(Megagon m, string stroke, string strokeWidth)
    {
        // e.g. <path d="M20,230 Q40,205 50,230 T90,230" fill="none" stroke="blue" stroke-width="5"/>
        var sb = new StringBuilder();

        sb.Append("<path d = '");
        sb.Append(string.Format("M{0},{1} ", m.Outline[0].X, m.Outline[0].Y));

        for (int i = 1; i < m.Outline.Length; i++)
        {
            // get the distance from previous point
            var distance = Math.Round(m.Outline[i].GetDistanceTo(m.Outline[i - 1]));

            if (distance > _grid.HexLayout.Size.X)
            {
                sb.Append(string.Format("M{0},{1} ", m.Outline[i].X, m.Outline[i].Y));
            }
            else
            {
                sb.Append(string.Format("L{0},{1} ", m.Outline[i].X, m.Outline[i].Y));
            }
        }

        var distanceForLast = Math.Round(m.Outline[m.Outline.Length - 1].GetDistanceTo(m.Outline[0]));

        if (distanceForLast <= _grid.HexLayout.Size.X)
            sb.Append(string.Format("L{0},{1} ", m.Outline[0].X, m.Outline[0].Y));

        sb.Append("' style = 'fill:none; stroke:#000000; stroke-width:3' />");

        return sb.ToString();
    }

    public async Task SaveMe()
    {
        // save the grid as an SVG document

        var filename = string.Format("{0}r_{1}c_{2}_hexgrid.svg", _rowCount, _colCount, _sideLen);
        var paramz = new object[] { _svg, filename };

        try
        {
            await jsRuntime.InvokeVoidAsync("saveSvg", paramz);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

}
